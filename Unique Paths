public int uniquePaths(int m, int n) {
        if(m <= 0 || n<= 0)
            return 0;
        int helper[] = new int[n];
        for(int i=0;i<n;i++) {
            helper[i] = 1;
        }
        for(int i=1;i<m;i++) {
            for(int j=1;j<n;j++) {
                helper[j] = helper[j] + helper[j-1];
            }
        }
        return helper[n-1];
    }

//Using recursion
//Recursive solution
    public int uniquePaths(int m, int n) {
        if(m <= 0 || n <= 0)
            return 0;
        return helper(1,1,m,n);
    }
    public int helper(int i, int j, int m, int n) {
        if(i == m && j == n)
            return 1;
        if(i > m || j > n)
            return 0;
        return helper(i+1,jm,n) + helper(i,j+1,m,n);
    }
