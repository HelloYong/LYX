//Use the way in Largest rectangle in histogram
//O(m*n) time complexity, O(matrix[0].length) space complexity
//Combine DP
//A very good solution
public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;
        int [] arr = new int[matrix[0].length];
        int max = 0;
        for(int i=0;i<matrix.length;i++) {
            for(int j=0;j<matrix[0].length;j++) {
                if(matrix[i][j] == '0')
                    arr[j] = 0;
                else
                    arr[j] = arr[j] + 1;
            }
            max = Math.max(max,maxValue(arr));
        }
        return max;
    }
    
    public int maxValue(int[] arr) {
        if(arr == null || arr.length == 0)
            return 0;
        Stack<Integer> stack = new Stack<Integer>();
        int max = 0;
        for(int i=0;i<arr.length;i++) {
            while(!stack.isEmpty() && arr[i] <= arr[stack.peek()]) {
                int index = stack.pop();
                max = Math.max(max,stack.isEmpty()?i*arr[index]:(i-stack.peek()-1)*arr[index]);
            }
            stack.push(i);
        }
        
        while(!stack.isEmpty()) {
            int index = stack.pop();
            if(stack.isEmpty()) {
                max = Math.max(max,arr.length*arr[index]);
            }else {
                max = Math.max(max,arr[index]*(arr.length-stack.peek()-1));
            }
        }
        return max;
    }


//Bruth force solution. Check one by one but time limit.
public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;
        int max = 0;
        for(int i=0;i<matrix.length;i++) {
            for(int j=0;j<matrix[0].length;j++) {
                if(matrix[i][j] != '0')
                    max = Math.max(max,helper(matrix,i,j));
            }
        }
        return max;
    }
    
    public int helper(char[][] matrix, int x, int y) {
        if(matrix == null || matrix.length == 0 
            || matrix[0].length == 0 || x<0 || y<0 || x>=matrix.length || y>=matrix[0].length)
            return 0;
        int max = 1;
        for(int i=x;i<matrix.length;i++) {
            for(int j=y;j<matrix[0].length;j++) {
                if(matrix[i][j] != '0') {
                    max = Math.max((i+1-x)*(j+1-y),max);
                }else {
                    break;
                }
            }
        }
        return max;
    }
