// A very simple solution: Using stack to store the index
// Similar with Largest rectangle in histogram
public int trap(int[] A) { 
        if(A == null || A.length <= 2)
            return 0;
        Stack<Integer> stack = new Stack<Integer>();
        int amount = 0;
        for(int i=0;i<A.length;i++) {
            while(!stack.isEmpty() && A[i]>=A[stack.peek()]){
                int index = stack.pop();
                if(!stack.isEmpty()) {
                    amount += (Math.min(A[i],A[stack.peek()]) - A[index])*(i-stack.peek()-1);
                }
            }
            stack.push(i);
        }
        return amount;
    }

//Another solution:
public int trap(int[] A) { 
        if(A == null || A.length == 0)
            return 0;
        int left[] = new int[A.length];
        int right[] = new int[A.length];
        int res = 0;
        left[0] = A[0];
        right[A.length - 1] = A[A.length - 1];
        for(int i=1;i<A.length;i++) {
            left[i] = Math.max(left[i-1],A[i]);
        }
        for(int i=A.length-2;i>=0;i--) {
            right[i] = Math.max(right[i+1],A[i]);
        }
        for(int i=0;i<A.length;i++) {
            if(Math.min(left[i],right[i]) > A[i])
                res = res + (Math.min(left[i],right[i]) - A[i])*1;
        }
        return res;
    }
