//Given an array of strings, return all groups of strings that are anagrams.
//If strs.length == n; Max(strs[i].length()) = k, then time: O(nklogk), space O(nk)
public List<String> anagrams(String[] strs) { 
        List<String> list = new ArrayList<String>();
        if(strs == null || strs.length == 0)
            return list;
        HashMap<String,List<String>> map = new HashMap<String,List<String>>();
        for(int i=0;i<strs.length;i++) {
            char [] strArr = strs[i].toCharArray();
            Arrays.sort(strArr);
            String sortedStr = new String(strArr);
            if(map.containsKey(sortedStr)) {
                map.get(sortedStr).add(strs[i]);
            }else {
                List<String> tmp = new ArrayList<String>();
                tmp.add(strs[i]);
                map.put(sortedStr,tmp);
            }
        }
        Iterator iter = map.values().iterator();  //How to use iterator
        while(iter.hasNext()) {
            List<String> next = (ArrayList<String>)iter.next();
            if(next.size() > 1) {
                list.addAll(next);  //addAll() method.
            }
        }
        return list;
    }
