// NP problem but we can solve this in polynomial time using DP
// Different with longest common substring
public static int findLongest(String str1, String str2) {
		if(str1 == null || str2 == null || str1.length() == 0 || str2.length() == 0)
			return 0;
		int res [] = new int[str2.length() + 1];
		boolean exist = false;
		res[0] = 0;
		for(int i=0;i<str2.length();i++) {
			if(exist) {
				res[i+1] = 1; 
			}else {
				if(str1.charAt(0) == str2.charAt(i)) {
					res[i+1] = 1;
					exist = true;
				}
			}
		}
		
		for(int i=1;i<str1.length();i++) {
			int cur [] = new int[str2.length() + 1];
			for(int j=0;j<str2.length();j++) {
				if(str1.charAt(i) == str2.charAt(j)) {
					cur[j+1] = res[j] + 1;
				}else {
					cur[j+1] = Math.max(cur[j], res[j+1]);
				}
			}
			res = cur;
		}
		return res[str2.length()];
	}

//A more comprise solution:
public static int longestCommonSequence(String s1, String s2) {
		if(s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0)
			return 0;
		int res[] = new int[s2.length()+1];
		for(int i=0;i<s1.length();i++) {
			int cur[] = new int[s2.length() + 1];
			for(int j=0;j<s2.length();j++) {
				if(s1.charAt(i) == s2.charAt(j))
					cur[j+1] = res[j] + 1;
				else
					cur[j+1] = Math.max(cur[j], res[j+1]);
			}
			res = cur;
		}
		return res[res.length - 1];
	}
