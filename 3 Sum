//Using backtracking
public List<List<Integer>> threeSum(int[] num) { 
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(num == null || num.length < 3)
            return list;
        List<Integer> subList = new ArrayList<Integer>();
        Arrays.sort(num);
        helper(num,list,subList,0,0);
        return list;
    }
    
    public void helper(int [] num, List<List<Integer>> list, List<Integer> subList, int index, int a) {
        if(index == 3) {
            int sum = subList.get(0) + subList.get(1) + subList.get(2);
            if(sum == 0) {
                List<Integer> tmp = new ArrayList<Integer>(subList);
                list.add(tmp);
            }
            return;
        }
        for(int i=a;i<num.length;i++) {
            subList.add(num[i]);
            helper(num,list,subList,index+1,i+1);
            subList.remove(subList.size()-1);
            while(i<num.length-1 && num[i] == num[i+1]) {
                i++;
            }
        }
    }


//Similar with two sum
// clamping after sort
public List<List<Integer>> threeSum(int[] num) {  
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(num == null || num.length < 3)
            return list;
        Arrays.sort(num);
        for(int i=0;i<num.length-2;i++) {
            List<List<Integer>> tmp = helper(num,i+1,-num[i]);
            for(int j=0;j<tmp.size();j++) {
                tmp.get(j).add(0,num[i]);
            }
            list.addAll(tmp);
            while(i<num.length-1 && num[i] == num[i+1]) {
                i++;
            }
        }
        return list;
    }
    
    public List<List<Integer>> helper(int[] num, int start, int target) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(start >= num.length-1)
            return list;
        int left = start, right = num.length-1;
        while(left < right) {
            if(num[left] + num[right] == target) {
                List<Integer> tmp = new ArrayList<Integer>();
                tmp.add(num[left]);
                tmp.add(num[right]);
                list.add(tmp);
                left++;
                right--;
                while(left < right && num[left] == num[left-1]) {
                    left++;
                }
                while(left < right && num[right] == num[right+1]) {
                    right--;
                }
            }else if (num[left] + num[right] > target) {
                right--;
            }else {
                left++;
            }
        }
        return list;
    }
