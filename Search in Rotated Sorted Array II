//Because of duplications, when A[start] <= A[mid], we can't judge whether the pivot on the left or right of mid.
//For example {1,2,3,3,3,3,3}  --> {3,1,2,3,3,3,3} or {3,3,3,3,3,1,2}.
//The solution is when A[start] == A[mid], we shift start to right until A[start] != A[mid]
public boolean search(int[] A, int target) { 
        if(A == null || A.length == 0)
            return false;
        int start = 0, end = A.length - 1;
        while(start <= end) {
            int mid = start + (end - start)/2;
            if(A[mid] == target)
                return true;
            if(A[start] < A[mid]) {
                if(A[start] <= target && target < A[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else if(A[start] > A[mid]) {
                if(A[mid] < target && A[end] >= target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }else {
                start++;
            }
        }
        return false;
    }
