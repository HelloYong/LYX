//Using backtracking
public List<List<Integer>> threeSum(int[] num) { 
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(num == null || num.length < 3)
            return list;
        List<Integer> subList = new ArrayList<Integer>();
        Arrays.sort(num);
        helper(num,list,subList,0,0);
        return list;
    }
    
    public void helper(int [] num, List<List<Integer>> list, List<Integer> subList, int index, int a) {
        if(index == 3) {
            int sum = subList.get(0) + subList.get(1) + subList.get(2);
            if(sum == 0) {
                List<Integer> tmp = new ArrayList<Integer>(subList);
                list.add(tmp);
            }
            return;
        }
        for(int i=a;i<num.length;i++) {
            subList.add(num[i]);
            helper(num,list,subList,index+1,i+1);
            subList.remove(subList.size()-1);
            while(i<num.length-1 && num[i] == num[i+1]) {
                i++;
            }
        }
    }
