//This can be used as a template for BFS.
//queue,visited,curNum,lastNum,
//When adding elements, check whether it is inside the visited.
public List<List<Integer>> levelOrder(TreeNode root) { 
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(root == null)
            return list;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        Set<TreeNode> visited = new HashSet<TreeNode>();
        visited.add(root);
        List<Integer> childList = new ArrayList<Integer>();
        int curNum = 0, lastNum = 1;
        while(!queue.isEmpty()) {
            TreeNode cur = queue.poll();
            lastNum--;
            childList.add(cur.val);
            if(cur.left != null && !visited.contains(cur.left)) {
                queue.add(cur.left);
                curNum++;
                visited.add(cur.left);
            }
            if(cur.right != null && !visited.contains(cur.right)) {
                queue.add(cur.right);
                curNum++;
                visited.add(cur.right);
            }
            if(lastNum == 0) {
                list.add(childList);
                childList = new ArrayList<Integer>();
                lastNum = curNum;
                curNum = 0;
            }
        }
        return list;
    }
