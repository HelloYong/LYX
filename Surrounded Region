public void solve(char[][] board) {
        if(board == null || board.length == 0)
            return;
        int rows = board.length - 1;
        int cols = board[0].length - 1;
        for(int i=0;i<=cols;i++) {
            fill(board,0,i);
            fill(board,rows,i);
        }
        for(int j=0;j<=rows;j++) {
            fill(board,j,0);
            fill(board,j,cols);
        }
        for(int i=0;i<=rows;i++) {
            for(int j=0;j<=cols;j++) {
                if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                }else if(board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    
    //Fill using recursion.
    public void fill(char[][] board, int i, int j) {
        if(board[i][j]!='O')  
            return; 
        board[i][j] = '#';
        Queue<Integer> queue = new LinkedList<Integer>();
        int code = i*board[0].length + j;
        queue.add(code);
        while(!queue.isEmpty()) {
            code = queue.poll();
            int row = code/board[0].length;
            int col = code % board[0].length;
            //left
            if(col > 0 && board[row][col-1] == 'O') {
                queue.add(row*board[0].length + col-1);
                board[row][col-1] = '#';
            }
            //right
            if(col < board[0].length - 1 && board[row][col+1] == 'O') {
                queue.add(row*board[0].length + col+1);
                board[row][col+1] = '#';
            }
            //up
            if(row > 0 && board[row-1][col] == 'O') {
                queue.add((row-1)*board[0].length + col);
                board[row-1][col] = '#';
            }
            //down
            if(row < board.length-1 && board[row+1][col] == 'O') {
                queue.add((row+1)*board[0].length + col);
                board[row+1][col] = '#';
            }
        }
    }
