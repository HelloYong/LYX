//基本思路就是先扫描走到新的interval应该插入的位置，接下来就是插入新的interval并检查后面是否冲突，
//一直到新的interval的end小于下一个interval的start，然后取新interval和当前interval中end大的即可
//有朋友可能会说为什么不in-place的进行操作，这样就不需要额外空间，
//但是如果使用ArrayList这个数据结构，那么删除操作是线性的，如此时间就不是O(n)的。如果这道题是用LinkedList那么是可以做到in-place的，并且时间是线性的。
public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> list = new ArrayList<Interval>();
        if(newInterval == null || newInterval.start > newInterval.end)
            return intervals;
        if(intervals == null) {
            list.add(newInterval);
            return list;
        }
        if(intervals.size() == 0) { 
            intervals.add(newInterval);
            return intervals;
        }
        int i = 0;
        while(i<intervals.size() && intervals.get(i).end < newInterval.start) {
            list.add(intervals.get(i));
            i++;
        }
        if(i<intervals.size()) {
            newInterval.start = Math.min(newInterval.start,intervals.get(i).start);
        }
        list.add(newInterval);
        while(i<intervals.size() && intervals.get(i).start <= newInterval.end) {
            newInterval.end = Math.max(newInterval.end,intervals.get(i).end);
            i++;
        }
        while(i<intervals.size()) {
            list.add(intervals.get(i));
            i++;
        }
        return list;    
    }
