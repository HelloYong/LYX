//Implement str
//There is another solution which using hash code with linear complexity.
public String strStr(String haystack, String needle) { 
        if(haystack == null || needle == null || needle.length() == 0)
            return haystack;
        if(haystack.length() < needle.length())
            return null;
        for(int i=0;i<haystack.length()-needle.length()+1;i++) {
            boolean match = true;
            for(int j=0;j<needle.length();j++) {
              if(haystack.charAt(i+j) != needle.charAt(j)) {
                  match = false;
                  break;
              }
            }
            if(match) {
                return haystack.substring(i,haystack.length());
            }
        }
        return null;
    }

//KMP algorithm
//KMP algorithm
    public String strStr(String haystack, String needle) {  
        if(haystack == null || needle == null)
            return "";
        if(needle.length() == 0)
            return haystack;
        int [] arr = new int[needle.length()];
        arr[0] = -1;
        next(needle,arr);
        int len1 = haystack.length();
        int len2 = needle.length();
        int i=0,j=0;
        while(i<len1 && j<len2) {
            if(haystack.charAt(i) == needle.charAt(j)){
                i++;
                j++;
            }else if(j == 0) {
                i++;
            }else {
                j = arr[j-1] + 1;
            }
        }
        return j == len2 ? haystack.substring(i-len2):null;
        
    }
    
    public void next(String needle,int [] arr) {
        if(needle == null || needle.length() == 0)
            return;
        int n = needle.length();
        for(int j=1;j<n;j++) {
            int i = arr[j-1];
            while(needle.charAt(j) != needle.charAt(i+1)  && i >= 0)
                i = arr[i];
            if(needle.charAt(j) == needle.charAt(i+1))
                arr[j] = i+1;
            else
                arr[j] = -1;
        }
    }
    
    //Using rolling hash
    public String strStr(String haystack, String needle) { 
        if(haystack == null || needle == null || needle.length() > haystack.length())
            return null;
        int base = 29;
        long patternhash = 0;
        long hayhash = 0;
        long tempbase = 1;
        for(int i=0;i<needle.length();i++) {
            patternhash += (needle.charAt(i)-'a'+1)*tempbase;
            hayhash += (haystack.charAt(i)-'a'+1)*tempbase;
            tempbase *= base;
        }
        if(patternhash == hayhash)  return haystack;
        for(int i=needle.length();i<haystack.length();i++) {
            hayhash = hayhash/base + (haystack.charAt(i)-'a'+1)*tempbase/base;
            if(hayhash == patternhash)
                return haystack.substring(i-needle.length()+1);
        }
        return null;
    }
