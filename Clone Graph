//Using BFS, QUEUE, Hash
//Hash can be hash set, hash map according to need to store the visited node.
//Add the root to queue and hash first, then go inside into loop
//
public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) { 
        if(node == null)
            return null;
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode,UndirectedGraphNode> map = new HashMap<UndirectedGraphNode,UndirectedGraphNode>();
        queue.add(node);
        UndirectedGraphNode copy = new UndirectedGraphNode(node.label);
        map.put(node,copy);
        while(!queue.isEmpty()) {
            UndirectedGraphNode cur = queue.poll();
            for(int i=0;i<cur.neighbors.size();i++) {
                UndirectedGraphNode ugn = cur.neighbors.get(i);
                if(map.containsKey(ugn)) {
                    map.get(cur).neighbors.add(map.get(ugn));
                }else {
                    copy = new UndirectedGraphNode(ugn.label);
                    queue.add(ugn);
                    map.put(ugn,copy);
                    map.get(cur).neighbors.add(map.get(ugn));
                }
            }
        }
        return map.get(node);
    }

//DFS
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {  
        if(node == null)
            return null;
        Stack<UndirectedGraphNode> stack = new Stack<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode,UndirectedGraphNode> visited = new HashMap<UndirectedGraphNode,UndirectedGraphNode>();
        stack.push(node);
        UndirectedGraphNode copy = new UndirectedGraphNode(node.label);
        visited.put(node,copy);
        while(!stack.isEmpty()) {
            UndirectedGraphNode cur = stack.pop();
            for(int i=0;i<cur.neighbors.size();i++) {
                UndirectedGraphNode ugn = cur.neighbors.get(i);
                if(visited.containsKey(ugn)) {
                    visited.get(cur).neighbors.add(visited.get(ugn));
                }else {
                    copy = new UndirectedGraphNode(ugn.label);
                    visited.put(ugn,copy);
                    stack.push(ugn);
                    visited.get(cur).neighbors.add(copy);;
                }
            }
        }
        return visited.get(node);
    }
