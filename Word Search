//A BFS search, using a 2D boolean array to recode the used element.

public boolean exist(char[][] board, String word) { 
        if(word == null || word.length() == 0 || board == null || board.length == 0 || board[0].length == 0)
            return false;
        boolean visited [][] = new boolean[board.length][board[0].length];
        boolean res = false;
        for(int i=0;i<board.length;i++) {
            for(int j=0;j<board[0].length;j++) {
                res = res || helper(board, word, visited, i, j, 0);
            }
        }
        return res;
    }
    
    private boolean helper(char[][] board, String word, boolean [][] visited, int i, int j, int index) {
        if(index == word.length())
            return true;
        boolean res = false;
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] ||word.charAt(index) != board[i][j])
            return false;
        visited[i][j] = true;
        res = helper(board,word,visited,i+1,j,index+1) 
                || helper(board,word,visited,i,j+1,index+1)
                || helper(board,word,visited,i-1,j,index+1)
                || helper(board,word,visited,i,j-1,index+1);
        visited[i][j] = false;
        return res;
    }
