//Given a m x n grid filled with non-negative numbers, 
//find a path from top left to bottom right which minimizes the sum of all numbers along its path.
// Two solutions to solve this problem.

//Using recursion
public int minPathSum(int[][] grid) {
  if(grid == null || grid.length == 0 || grid[0].length == 0)
    return 0;
  return helper(grid,0,0);
}
    
public int helper(int [][] grid, int x, int y) {
  if(x >= grid.length || y >= grid[0].length)
    return Integer.MAX_VALUE;
  if(x == grid.length -1 && y == grid[0].length - 1)
    return grid[x][y];
  return Math.min(helper(grid,x+1,y),helper(grid,x,y+1)) + grid[x][y];
}
    
    //using DP
    public int minPathSum(int [][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0)
            return 0;
        for(int i=1;i<grid[0].length;i++) {
            grid[0][i] = grid[0][i-1] + grid[0][i];
        }
        for(int i=1;i<grid.length;i++) {
            grid[i][0] = grid[i-1][0] + grid[i][0];
        }
        for(int i=1;i<grid.length;i++) {
            for(int j=1;j<grid[0].length;j++) {
                grid[i][j] = Math.min(grid[i-1][j],grid[i][j-1]) + grid[i][j];
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
//If we ask that the grid array can't change.
//Then we can create a 2d array to store the minimun path.
// But here, we give a new way just using O(m) space

public int minPathSum(int[][] grid) {  
    if(grid == null || grid.length==0 || grid[0].length==0)  
        return 0;  
    int[] res = new int[grid[0].length];  
    res[0] = grid[0][0];  
    for(int i=1;i<grid[0].length;i++)  
    {  
        res[i] = res[i-1]+grid[0][i];  
    }  
    for(int i=1;i<grid.length;i++)  
    {  
        for(int j=0;j<grid[0].length;j++)  
        {  
            if(j==0)  
                res[j] += grid[i][j];  
            else  
                res[j] = Math.min(res[j-1], res[j])+grid[i][j];  
        }  
    }  
    return res[grid[0].length-1];  
} 
